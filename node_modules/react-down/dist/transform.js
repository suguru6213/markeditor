'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.default = transform;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _markdownIt = require('markdown-it');

var _markdownIt2 = _interopRequireDefault(_markdownIt);

var _camelCase = require('camel-case');

var _camelCase2 = _interopRequireDefault(_camelCase);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function parseStyle(string) {
  var style = {};
  var pairs = string.split(';');
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = pairs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var pair = _step.value;

      var _pair$split = pair.split(':'),
          _pair$split2 = _slicedToArray(_pair$split, 2),
          key = _pair$split2[0],
          value = _pair$split2[1];

      style[(0, _camelCase2.default)(key)] = value;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return style;
}

function parseAttrs(attrs) {
  if (!Array.isArray(attrs)) return null;else return attrs.reduce(function (props, attr) {
    var key = (0, _camelCase2.default)(attr[0]);
    var value = key === 'style' ? parseStyle(attr[1]) : attr[1];
    return Object.assign(props, _defineProperty({}, key, value));
  }, {});
}

function createReactElements(nodes, tokens, createElement) {
  var lastNode = function lastNode() {
    return nodes[nodes.length - 1];
  };
  var key = 0;

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = tokens[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var token = _step2.value;

      key += 1;
      switch (token.type) {
        case 'heading_open':
        case 'paragraph_open':
        case 'em_open':
        case 'strong_open':
        case 'link_open':
        case 'blockquote_open':
        case 'bullet_list_open':
        case 'ordered_list_open':
        case 'list_item_open':
        case 'table_open':
        case 'thead_open':
        case 'tbody_open':
        case 'th_open':
        case 'tr_open':
        case 'td_open':
        case 's_open':
          nodes.push({
            type: token.tag,
            props: parseAttrs(token.attrs),
            children: [],
            token: token
          });
          break;
        case 'inline':
          createReactElements(nodes, token.children, createElement);
          break;
        case 'text':
          lastNode().children.push(token.content);
          break;
        case 'softbreak':
        case 'hr':
          lastNode().children.push(createElement(token.tag, { key: key }, undefined, token));
          break;
        case 'code_block':
        case 'code_inline':
        case 'fence':
          lastNode().children.push(createElement(token.tag, { key: key }, token.content, token));
          break;
        case 'image':
          {
            var props = Object.assign({ key: key }, parseAttrs(token.attrs), { alt: token.content });
            lastNode().children.push(createElement(token.tag, props, undefined, token));
            break;
          }
        case 'heading_close':
        case 'paragraph_close':
        case 'em_close':
        case 'strong_close':
        case 'link_close':
        case 'blockquote_close':
        case 'bullet_list_close':
        case 'ordered_list_close':
        case 'list_item_close':
        case 'table_close':
        case 'thead_close':
        case 'tbody_close':
        case 'th_close':
        case 'tr_close':
        case 'td_close':
        case 's_close':
          {
            var node = nodes.pop();
            var _props = Object.assign({ key: key }, node.props);
            var element = createElement(node.type, _props, node.children.slice(), node.token);
            lastNode().children.push(element);
            break;
          }
        default:
          console.warn('Unknown token:', token);
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}

function createReactTree(tokens, type, createElement) {
  var root = {
    type: type,
    props: null,
    children: []
  };
  createReactElements([root], tokens, createElement);
  return createElement(root.type, root.props, root.children, null);
}

function parseMarkdown(src) {
  var md = new _markdownIt2.default();
  return md.parse(src, {});
}

function defaultCreateElement(type, props, children) {
  return _react2.default.createElement(type, props, children);
}

function transform(src) {
  var createElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultCreateElement;

  return createReactTree(parseMarkdown(src), 'div', createElement);
}